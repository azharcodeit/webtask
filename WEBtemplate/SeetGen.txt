namespace Set
{
    class MainClass
    {
        static void Main(string[] args)
        {
            Set<String> s1 = new Set<String>(5);
            s1.add("ahead");
            s1.add("5");
            s1.add("10");
            s1.show();

            Set<String> s2= new Set<String>(5);
            s2.add("ahead");
            s2.add("5");
            s2.show();
            Set<String> s = s2 - s1;
            s.show();
        }
        class Set<Q>
        {
            private int y;
            private Q[] mas;
            private int index;

            public Set(int y)
            {
                index = -1;
                mas = new Q[y];
                this.y = y;

            }
            public void add(Q a)
            {
                foreach (Q i in this.mas)
                {
                    if ((i + "").Equals(a + "")) return;
                }
                if (index <= mas.Length)
                    mas[++index] = a;

            }
            public bool isEmpty()
            {
                if (mas.Length == 0) { return true; }
                return false;
            }
            public bool cont(Q z)
            {
                foreach (Q i in this.mas){
                    if (("" + i).Equals("" + z)) return true;

                }
                return false;
            }
            public void show()
            {
                for (int i = 0; i <= index; i++)
                {
                    Console.WriteLine(mas[i] +  " ");
                }
                Console.WriteLine();
            }
            public Q[] toArray()
            {
                return mas;
            }
            public int size() { return this.y; }
            public static Set<Q> operator %(Set<Q> a, Set<Q> b)
            {
                Set<Q> set1 = new Set<Q>(a.size() + b.size());
                for (int i = 0; i <= a.index; i++)
                {
                    int count = 0;
                    for (int j = 0; j <= b.index; j++)
                    {
                        if ((a.toArray()[i] + "").Equals((a.toArray()[j]) + ""))
                            count++;
                    }
                    if (count > 0)
                        set1.add(a.toArray()[i]);
                } return set1;
            }
            public static Set<Q> operator +(Set<Q> a, Set<Q> b)
            {
                Set<Q> set1 = new Set<Q>(a.size() + b.size());
                for (int i = 0; i <= a.index; i++)
                {
                    set1.add(a.toArray()[i]);
                }
                for (int j = 0; j <= b.index; j++)
                {
                    set1.add(a.toArray()[j]);
                }
                return set1;
            }
            public static Set<Q> operator -(Set<Q> a, Set<Q> b)
            {
                Set<Q> set1 = new Set<Q>(a.size() + b.size());
                foreach (Q i in b.toArray())
                {
                    if (!a.cont(i))
                        set1.add(i);
                }
                return set1;
            }
        }
    }
}